{"version":3,"sources":["../../../test/e2e/runner.js"],"names":["process","env","NODE_ENV","webpack","require","DevServer","webpackConfig","devConfigPromise","server","then","devServerOptions","devConfig","devServer","compiler","port","host","listen","opts","argv","slice","indexOf","concat","spawn","runner","stdio","on","code","close","exit","err"],"mappings":";;AAAA;AACAA,QAAQC,GAAR,CAAYC,QAAZ,GAAuB,SAAvB;;AAEA,IAAMC,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,YAAYD,QAAQ,oBAAR,CAAlB;;AAEA,IAAME,gBAAgBF,QAAQ,+BAAR,CAAtB;AACA,IAAMG,mBAAmBH,QAAQ,8BAAR,CAAzB;;AAEA,IAAII,eAAJ;;AAEAD,iBAAiBE,IAAjB,CAAsB,qBAAa;AACjC,MAAMC,mBAAmBC,UAAUC,SAAnC;AACA,MAAMC,WAAWV,QAAQG,aAAR,CAAjB;AACAE,WAAS,IAAIH,SAAJ,CAAcQ,QAAd,EAAwBH,gBAAxB,CAAT;AACA,MAAMI,OAAOJ,iBAAiBI,IAA9B;AACA,MAAMC,OAAOL,iBAAiBK,IAA9B;AACA,SAAOP,OAAOQ,MAAP,CAAcF,IAAd,EAAoBC,IAApB,CAAP;AACD,CAPD,EAQCN,IARD,CAQM,YAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIQ,OAAOjB,QAAQkB,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAX;AACA,MAAIF,KAAKG,OAAL,CAAa,UAAb,MAA6B,CAAC,CAAlC,EAAqC;AACnCH,WAAOA,KAAKI,MAAL,CAAY,CAAC,UAAD,EAAa,6BAAb,CAAZ,CAAP;AACD;AACD,MAAIJ,KAAKG,OAAL,CAAa,OAAb,MAA0B,CAAC,CAA/B,EAAkC;AAChCH,WAAOA,KAAKI,MAAL,CAAY,CAAC,OAAD,EAAU,QAAV,CAAZ,CAAP;AACD;;AAED,MAAMC,QAAQlB,QAAQ,aAAR,CAAd;AACA,MAAMmB,SAASD,MAAM,gCAAN,EAAwCL,IAAxC,EAA8C,EAAEO,OAAO,SAAT,EAA9C,CAAf;;AAEAD,SAAOE,EAAP,CAAU,MAAV,EAAkB,UAAUC,IAAV,EAAgB;AAChClB,WAAOmB,KAAP;AACA3B,YAAQ4B,IAAR,CAAaF,IAAb;AACD,GAHD;;AAKAH,SAAOE,EAAP,CAAU,OAAV,EAAmB,UAAUI,GAAV,EAAe;AAChCrB,WAAOmB,KAAP;AACA,UAAME,GAAN;AACD,GAHD;AAID,CApCD","file":"runner.js","sourcesContent":["// 1. start the dev server using production config\nprocess.env.NODE_ENV = 'testing'\n\nconst webpack = require('webpack')\nconst DevServer = require('webpack-dev-server')\n\nconst webpackConfig = require('../../build/webpack.prod.conf')\nconst devConfigPromise = require('../../build/webpack.dev.conf')\n\nlet server\n\ndevConfigPromise.then(devConfig => {\n  const devServerOptions = devConfig.devServer\n  const compiler = webpack(webpackConfig)\n  server = new DevServer(compiler, devServerOptions)\n  const port = devServerOptions.port\n  const host = devServerOptions.host\n  return server.listen(port, host)\n})\n.then(() => {\n  // 2. run the nightwatch test suite against it\n  // to run in additional browsers:\n  //    1. add an entry in test/e2e/nightwatch.conf.js under \"test_settings\"\n  //    2. add it to the --env flag below\n  // or override the environment flag, for example: `npm run e2e -- --env chrome,firefox`\n  // For more information on Nightwatch's config file, see\n  // http://nightwatchjs.org/guide#settings-file\n  let opts = process.argv.slice(2)\n  if (opts.indexOf('--config') === -1) {\n    opts = opts.concat(['--config', 'test/e2e/nightwatch.conf.js'])\n  }\n  if (opts.indexOf('--env') === -1) {\n    opts = opts.concat(['--env', 'chrome'])\n  }\n\n  const spawn = require('cross-spawn')\n  const runner = spawn('./node_modules/.bin/nightwatch', opts, { stdio: 'inherit' })\n\n  runner.on('exit', function (code) {\n    server.close()\n    process.exit(code)\n  })\n\n  runner.on('error', function (err) {\n    server.close()\n    throw err\n  })\n})\n"]}